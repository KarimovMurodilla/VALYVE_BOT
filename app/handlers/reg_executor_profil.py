import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from .. import connection, file_ids, buttons, config, getLocationInfo
from app.admin import admin_connection


bot = Bot(token=config.TOKEN, parse_mode = 'html')


class RegExecutor(StatesGroup):
	step1 = State()
	step2 = State()
	step3 = State()
	step4 = State()
	step5 = State()
	step6 = State()


async def process_create_executor_profil(c: types.CallbackQuery, state: FSMContext):
		await RegExecutor.step1.set()
		await bot.delete_message(c.message.chat.id, c.message.message_id)
		await bot.send_message(c.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –í–∞—à–µ –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ, –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –í–∞—Å.",
			reply_markup = buttons.back_canc)


async def process_create1(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		data['name'] = message.text

	await RegExecutor.next()
	await bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –í–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏–µ (–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥), –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞.")


async def process_create2(message: types.Message, state: FSMContext):
	try:
		date = message.text
		day = date[:2]
		month = date[3:5]
		year = date[6:]
		now = datetime.datetime.now().strftime('%Y')
		age = int(now) - int(year)

		if age > 0 and int(day) <= 31 and int(month) <= 12 and int(year) > 1920 and int(year) < int(now)-7:
			async with state.proxy() as data:
				data['date_of_birth'] = message.text

			await RegExecutor.next()
			await bot.send_photo(message.chat.id, photo = 'AgACAgIAAxkBAAP1YW51oVYVSPmlzCGUUVxGek1i0jAAAimzMRt7rXhLGuB8Y2FU_DQBAAMCAAN5AAMhBA',
				caption = "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –í–∞—à–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ä–µ–∑—é–º–µ, –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è.")

		else:
			await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è!\n<b>(–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥)</b>")
	except Exception as e:
		print(e)
		await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è!\n<b>(–¥–µ–Ω—å.–º–µ—Å—è—Ü.–≥–æ–¥)</b>")



async def process_create3(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		if message.photo:
			data['media'] = message.photo[-1].file_id
		elif message.video:
			data['media'] = message.video.file_id
		else:
			await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –í–∞—à–µ —Ñ–æ—Ç–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ä–µ–∑—é–º–µ, –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è.")

		

	await RegExecutor.next()
	msg = await bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –¥–ª—è —Å–≤—è–∑–∏ –ø–æ —Ä–∞–±–æ—Ç–µ.",
		reply_markup = buttons.contact_ex)
	
	async with state.proxy() as data:
		data['msg_id'] = msg.message_id


async def process_contact_invalid(message: types.Message, state: FSMContext):
	msg = await bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –¥–ª—è —Å–≤—è–∑–∏ –ø–æ —Ä–∞–±–æ—Ç–µ.",
		reply_markup = buttons.contact_ex)
	
	async with state.proxy() as data:
		data['msg_id'] = msg.message_id


async def process_create4(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		data['contact'] = message.contact.phone_number
		msg_id = data['msg_id']

	await RegExecutor.next()
	await bot.delete_message(message.chat.id, msg_id)
	await bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –ª–∏ –í—ã —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏?",
		reply_markup = buttons.yes_no)


async def process_create5(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		data['skill'] = message.text

		ex_id = message.from_user.id
		ex_name = data['name']
		date_of_birth = data['date_of_birth']
		ex_pic = data['media']
		ex_contact = data['contact']
		ex_skill = data['skill']
		ex_rate = 0
		date_registration = datetime.datetime.today().strftime('%d.%m.%Y - %H:%M')
		ex_status = 'free'
		
		if not connection.getExecutorProfil(ex_id):
			connection.regExecutor(ex_id, ex_name, date_of_birth, ex_pic, ex_contact, ex_skill, ex_rate, date_registration, ex_status)
			await bot.send_message(message.chat.id, "<b>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:</b>\n\n"
								                    "–ü—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", reply_markup = buttons.menu_executor)

		else:
			# connection.UpdateExecutorProfil(ex_id, ex_name, date_of_birth, ex_pic, ex_contact, ex_skill)
			await bot.send_message(message.chat.id, "<b>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:</b>\n\n" 
													"–í–∞—à –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24—Ö —á–∞—Å–æ–≤!", reply_markup = buttons.menu_executor)
			status = connection.checkUserStatus(message.from_user.id)[0]
			admin_connection.addRequestProfil(ex_id, status, ex_name, ex_pic, ex_contact, date_of_birth, ex_skill)

	await state.finish()



async def process_yes_skill(c: types.CallbackQuery, state: FSMContext):
	await RegExecutor.step5.set()
	await bot.delete_message(c.from_user.id, c.message.message_id)		
	await bot.send_message(c.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n–ö–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å, —Ä–∞–±–æ—Ç–∞ —Å –∫–∞—Å—Å–æ–π, –æ—Ç–∑—ã–≤—á–∏–≤–æ—Å—Ç—å, —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π.")


async def process_no_skill(c: types.CallbackQuery, state: FSMContext):
	async with state.proxy() as data:
		data['skill'] = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"

		ex_id = c.from_user.id
		ex_name = data['name']
		date_of_birth = data['date_of_birth']
		ex_pic = data['media']
		ex_contact = data['contact']
		ex_skill = data['skill']
		ex_rate = 0
		date_registration = datetime.datetime.today().strftime('%d.%m.%Y - %H:%M')
		ex_status = 'free'


		if not connection.getExecutorProfil(ex_id):
			connection.regExecutor(ex_id, ex_name, date_of_birth, ex_pic, ex_contact, ex_skill, ex_rate, date_registration, ex_status)
			await bot.delete_message(c.message.chat.id, c.message.message_id)	
			await bot.send_message(c.message.chat.id, "<b>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:</b>\n\n"
								                      "–ü—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", reply_markup = buttons.menu_executor)

		else:
			# connection.UpdateExecutorProfil(ex_id, ex_name, date_of_birth, ex_pic, ex_contact, ex_skill)
			await bot.delete_message(c.message.chat.id, c.message.message_id)	
			await bot.send_message(c.from_user.id, "<b>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:</b>\n\n" 
													"–í–∞—à –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24—Ö —á–∞—Å–æ–≤!", reply_markup = buttons.menu_executor)
			status = connection.checkUserStatus(c.from_user.id)[0]
			admin_connection.addRequestProfil(ex_id, status, ex_name, ex_pic, ex_contact, date_of_birth, ex_skill)

	await state.finish()	
	

async def get_geo(message: types.Message, state: FSMContext):
	ex_id = message.from_user.id
	connection.checkDeletionDate()
	

	if connection.checkReferral(ex_id)[3] == 'Banned':
		await bot.send_message(message.chat.id, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–±–∞–Ω–µ–Ω!")
	
	elif not connection.checkExecutor(ex_id):
		await bot.send_message(message.chat.id, "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.", reply_markup = buttons.create_executor_profil)
	
	elif connection.getExecutorProfil(ex_id)[8] == 'Banned':
		await bot.send_message(message.chat.id, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∑–∞–±–∞–Ω–µ–Ω!")

	elif connection.checkExecutor(ex_id)[8] == 'busy':
		await bot.send_message(message.chat.id, text = "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b>\n\n"
													   "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã, –ø–æ–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑")
				
	else:
		try:
			ex_id = message.from_user.id	
			async with state.proxy() as data:
				connection.nullPagination(ex_id)
				pag = connection.selectPag(ex_id)
				lat = data['lat']
				lon = data['long']
				orders = connection.selectAllOrders(lat, lon)[pag]

			await bot.send_message(message.chat.id, 
				f"<b>–ó–∞–∫–∞–∑—á–∏–∫:</b> <code>{orders[1]}</code>\n"
				f"<b>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</b> <code>{getLocationInfo.calculate_distance(lat, lon, orders[8], orders[9])}</code> –æ—Ç –í–∞—Å\n\n"
				f"<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> <code>{orders[6]}</code>\n"
				f"{connection.checkOrderType(orders[-2], orders)}"
				# f"<b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> <code>{orders[4]}</code>\n"
				f"<b>–ì—Ä–∞—Ñ–∏–∫:</b> <code>{orders[3]}</code>\n"
				f"<b>–°–º–µ–Ω–∞:</b> <code>{orders[5]}</code>\n\n"

				f"<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ:</b>\n<code>{orders[14]}</code>\n\n"
				f"<b>–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:</b>\n<code>{orders[15]}</code>\n\n"

				f"{orders[7]}",
					reply_markup = buttons.globalOrders(orders[0], orders[12]))
			await bot.send_message(message.chat.id, '–í–æ—Ç –ø–æ–¥–±–æ—Ä–æ—á–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –í–∞—Å! ü•∫', reply_markup = buttons.back_to_menu)


		except Exception as e:
			if type(e) == KeyError:				
				await bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–± —è –º–æ–≥ –ø–æ–∫–∞–∑–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –í–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ.", reply_markup = buttons.send_geo)
				await RegExecutor.step6.set()
			
			else:
				print(type(e), e)
				await bot.send_message(message.chat.id, "–ó–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", reply_markup = buttons.back_to_menu)


async def search_orders(message: types.Message, state: FSMContext):
	ex_id = message.from_user.id	
	async with state.proxy() as data:
		data['lat'] = message.location.latitude
		data['long'] = message.location.longitude

	if connection.checkExecutor(ex_id)[8] == 'busy':
		await bot.send_message(message.chat.id, text =  "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b>\n\n"
														"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã, –ø–æ–∫–∞ –Ω–µ –∑–∞–∫–æ–Ω—á–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –∑–∞–∫–∞–∑",
				reply_markup = buttons.menu_executor)
				
	else:
		if not connection.selectAllOrders(data['lat'], data['long']):
			await bot.send_message(message.chat.id, "–ó–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!", reply_markup = buttons.back_to_menu)


		else:
			try:
				connection.nullPagination(ex_id)
				pag = connection.selectPag(ex_id)
				lat = data['lat']
				lon = data['long']
				orders = connection.selectAllOrders(lat, lon)[pag]

				await bot.send_message(message.chat.id, 
					f"<b>–ó–∞–∫–∞–∑—á–∏–∫:</b> <code>{orders[1]}</code>\n"
					f"<b>–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ:</b> <code>{getLocationInfo.calculate_distance(lat, lon, orders[8], orders[9])}</code> –æ—Ç –í–∞—Å\n\n"
					f"<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> <code>{orders[6]}</code>\n"
					f"{connection.checkOrderType(orders[-2], orders)}"
					# f"<b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> <code>{orders[4]}</code>\n"
					f"<b>–ì—Ä–∞—Ñ–∏–∫:</b> <code>{orders[3]}</code>\n"
					f"<b>–°–º–µ–Ω–∞:</b> <code>{orders[5]}</code>\n\n"

					f"<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ:</b>\n<code>{orders[14]}</code>\n\n"
					f"<b>–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:</b>\n<code>{orders[15]}</code>\n\n"

					f"{orders[7]}",
						reply_markup = buttons.globalOrders(orders[0], orders[12]))
				await bot.send_message(message.chat.id, '–í–æ—Ç –ø–æ–¥–±–æ—Ä–æ—á–∫–∞ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –¥–ª—è –í–∞—Å! ü•∫', reply_markup = buttons.back_to_menu)

			except Exception as e:
				print(e)
				await bot.send_message(message.chat.id, "<b>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:</b>\n\n–í–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–∫–∞–∑—ã! –ó–∞–≥–ª—è–Ω–∏—Ç–µ –∫ –Ω–∞–º –ø–æ–∑–∂–µ.", reply_markup = buttons.menu_executor)
													

async def personal_cabinet(message: types.Message, state: FSMContext):
	await state.finish()
	ex_id = message.from_user.id

	if connection.checkReferral(ex_id)[3] == 'Banned':
		await bot.send_message(message.chat.id, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–±–∞–Ω–µ–Ω!")
	
	elif not connection.checkExecutor(ex_id):
		await bot.send_message(message.chat.id, "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è.", reply_markup = buttons.create_executor_profil)

	else:
		if connection.getExecutorProfil(ex_id)[8] == 'Banned':
			await bot.send_message(message.chat.id, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –∑–∞–±–∞–Ω–µ–Ω!")


		else:
			alldata = connection.getExecutorProfil(ex_id)
			try:
				await bot.send_photo(message.chat.id, photo = alldata[3], caption = f"<b>{alldata[1]}</b>\n\n"
																					f"  <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> <code>{alldata[2]}</code>\n"
																					f"  <b>–ù–æ–º–µ—Ä:</b> <code>+{alldata[4]}</code>\n\n"

																					f"<b>–ù–∞–≤—ã–∫–∏:</b>\n{alldata[5]}\n\n" 
																					f"  <b>–†–µ–π—Ç–∏–Ω–≥:</b> <code>{alldata[6]}</code>", 
																						reply_markup = buttons.get_works(message.from_user.id))
			except Exception as e:
				print(e)
				await bot.send_video(message.chat.id, alldata[3], caption = f'<b>{alldata[1]}</b>\n\n <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> <code>{alldata[2]}</code>\n <b>–ù–æ–º–µ—Ä:</b> <code>+{alldata[4]}</code>\n\n<b>–ù–∞–≤—ã–∫–∏:</b>\n{alldata[5]}\n\n <b>–†–µ–π—Ç–∏–Ω–≥:</b> <code>{alldata[6]}</code>', reply_markup = buttons.get_works(message.from_user.id))



def register_reg_executor_profil_handlers(dp: Dispatcher):
	dp.register_message_handler(process_create1, state = RegExecutor.step1)
	dp.register_message_handler(process_create2, state = RegExecutor.step2)
	dp.register_message_handler(process_create3, content_types = ['photo', 'video'], state = RegExecutor.step3)
	dp.register_message_handler(process_contact_invalid, state = RegExecutor.step4)
	dp.register_message_handler(process_create4, content_types = 'contact', is_sender_contact = True, state = RegExecutor.step4)
	dp.register_message_handler(process_create5, state = RegExecutor.step5)

	dp.register_message_handler(get_geo, text=['–ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–æ–≤', '–ò–∑–º–µ–Ω–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é'], state='*')
	dp.register_message_handler(search_orders, content_types = ['location','venue'], state=RegExecutor.step6)
	dp.register_message_handler(personal_cabinet, text='–õ–∏—á–Ω—ã–π –∫a–±–∏–Ω–µ—Ç', state='*') #a

	dp.register_callback_query_handler(process_create_executor_profil, lambda c: c.data == 'create_profil' or c.data == 'edit_ex', state = '*')
	dp.register_callback_query_handler(process_yes_skill, lambda c: c.data == 'yes', state = '*')
	dp.register_callback_query_handler(process_no_skill, lambda c: c.data == 'nep', state = '*')



