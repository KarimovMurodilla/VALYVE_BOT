import asyncio
import random
import datetime
import pyqiwi
from pyqiwip2p import QiwiP2P


from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from app.admin.admin_connection import selectStatuses
from .. import buttons, config, connection, file_ids


class TopUp(StatesGroup):
	step1 = State()


class WithDraw(StatesGroup):
	step1 = State()
	step2 = State()


class BuyCoupon(StatesGroup):
	step1 = State()


bot = Bot(token=config.TOKEN, parse_mode = 'html')
p2p = QiwiP2P(auth_key = config.QIWI_P2P_TOKEN)
wallet = pyqiwi.Wallet(token = config.QIWI_TOKEN, number = config.QIWI_NUMBER)


def checkPaymentStatus(name):
	def decorator(func):
		async def wrapper(c: types.CallbackQuery, state: FSMContext):
			if selectStatuses(name) == 'üî¥':
				await c.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ! –î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞!", show_alert = True)
			else:
				return await func(c, state)
		return wrapper
	return decorator




async def callback_bank(c: types.CallbackQuery, state: FSMContext):
	user_id = c.from_user.id
	await c.answer()

	try:
		ref_actives = connection.getRefActives(user_id)
		for i in ref_actives[0]:
			if connection.selectWherePublished(i):
				connection.addActiveReferral(user_id)
				connection.setActiveUser(i)
				
	except Exception as e:
		print(e)

	referral = connection.checkReferral(user_id)
	coupons = connection.getUserCpns(user_id)[0]
	await bot.send_photo(
		chat_id = c.from_user.id, 
		photo = file_ids.PHOTO['bank'],
		caption = f"<b>–ë–∞–ª–∞–Ω—Å:</b> <code>{float(referral[6])} ‚ÇΩ</code>\n\n"
				  f"<b>–ö—É–ø–æ–Ω VALYVE:</b> <code>{coupons} —à—Ç</code>\n\n"
				  f"<b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n"
				  f"‚îú <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö:</b> <code>{referral[5]} —É—á</code>\n"
				  f"‚îî <b>–û–∂–∏–¥–∞–Ω–∏–µ:</b> <code>{referral[4]} —É—á</code>\n\n"
				  f"üó£ <b>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</b>\n"
				  f"‚îî <a href='https://t.me/ValyveExchange_bot?start={user_id}'>–ó–∞–∂–º–∏ —á—Ç–æ–± —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å</a>",
					reply_markup = buttons.referral_settings)


# -----Withdraw----
@checkPaymentStatus('WITHDRAW')
async def callback_withdraw(c: types.CallbackQuery, state: FSMContext):
	user_id = c.from_user.id

	if connection.get_id(user_id)[6]:
		await c.answer()
		await WithDraw.step1.set()
		await bot.send_message(c.from_user.id, "–ù–∞  –∫–∞–∫—É—é —Å—É–º–º—É –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥", 
			reply_markup = buttons.back_canc)

	else:
		await c.answer(show_alert = True, text = "‚ö†Ô∏è –û—à–∏–±–∫–∞:\n\n"
						"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")


@checkPaymentStatus('WITHDRAW')
async def process_withdraw(message: types.Message, state: FSMContext):
	user_id = message.from_user.id

	if message.text.isdigit():
		if int(message.text) <= connection.get_id(user_id)[6]:
			async with state.proxy() as data:
				data['user_money'] = message.text

			commission = wallet.commission(pid=99, recipient=config.QIWI_NUMBER, amount=int(message.text))
			await bot.send_message(message.chat.id, "–ù–∞ —á—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞?\n\n"

													"–ö–æ–º–∏—Å—Å–∏—è Qiwi\n" 
													f"–ö–∞—Ä—Ç–∞: 2% + {float(commission.qw_commission.amount)} ‚ÇΩ\n" 
													"‚îîQiwi –ö–æ—à–µ–ª—ë–∫: 2%",
														reply_markup = buttons.withdrawBtns())
		else:
			await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞:\n\n"
								 "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
	else:
		await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞:\n\n"
							 "–í–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏!")


@checkPaymentStatus('WITHDRAW')
async def callback_pay_with_card(c: types.CallbackQuery, state: FSMContext):
	await c.answer()	

	await WithDraw.step2.set()
	await c.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –Ω–µ–π.")


@checkPaymentStatus('WITHDRAW')
async def callback_pay_with_purse(c: types.CallbackQuery, state: FSMContext):
	await c.answer()
	await WithDraw.step2.set()
	await c.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–æ—à–µ–ª—å–∫—É.")


@checkPaymentStatus('WITHDRAW')
async def process_withdraw_check(message: types.Message, state: FSMContext):
	user_id = message.from_user.id	

	async with state.proxy() as data:
		data['recipient'] = message.text
		user_money = data['user_money']

		await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –≤—ã–≤–æ–¥–µ\n" 
							   f"–ö –≤—ã–≤–æ–¥—É: {float(user_money)} ‚ÇΩ\n"
							   f"–ù–∞ –∫–∞—Ä—Ç—É: {message.text}",
							   		reply_markup = buttons.withdrawCheckBtns())


@checkPaymentStatus('WITHDRAW')
async def callback_confirm(c: types.CallbackQuery, state: FSMContext):
	try:
		async with state.proxy() as data:
			user_id = c.from_user.id
			recipient = data['recipient']
			user_money = data['user_money']
			comment = (f"{user_id}_{random.randint(1000, 9999)}")

			today = datetime.datetime.today()

			payment = wallet.send(pid=99, recipient=recipient, amount=user_money, comment=comment)
			connection.addBotPayment(user_id, 'withdraw', user_money, today)
			await c.message.answer("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:\n\n–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É!\n–û–∂–∏–¥–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24—Ö —á–∞—Å–æ–≤.")

	except Exception as e:
		print(e, type(e))
		await c.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞:\n\n"
			"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—Ä—Ç–∞/–Ω–æ–º–µ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è !")


# ---------TOP UP-----------
@checkPaymentStatus('REPLENISHMENT')
async def callback_top_up(c: types.CallbackQuery, state: FSMContext):
	await c.answer()
	user_id = c.from_user.id

	await TopUp.step1.set()
	await bot.send_message(c.from_user.id, "–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å?", 
			reply_markup = buttons.back_canc)
	

@checkPaymentStatus('REPLENISHMENT')
async def process_top_up(message: types.Message, state: FSMContext):
	if message.text.isdigit():
		user_id = message.from_user.id
		user_money = int(message.text)
		comment = (f"{user_id}_{random.randint(1000, 9999)}")
		bill = p2p.bill(amount=user_money, lifetime=15, comment=comment)

		await message.answer(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ\n–ö –∑–∞—á–∏—Å–ª–µ–Ω–∏—é: {float(message.text)} ‚ÇΩ", 
			reply_markup = buttons.showPayment(bill_id = bill.bill_id, url = bill.pay_url, price = user_money))	


@checkPaymentStatus('REPLENISHMENT')
async def check_payment(c: types.CallbackQuery, state: FSMContext):
	try:
		user_id = c.from_user.id
		ids = c.data[6:].split(',')
		bill = ids[0]
		price = ids[1]
		today = datetime.datetime.today()

		if str(p2p.check(bill_id = bill).status) == "PAID":

			connection.updateBalance(user_id, price, '+')
			connection.addPayment(user_id, 'refill', price, today)

			await c.message.delete()
			await c.answer(show_alert = True, text = "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:\n\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")

			await c.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup = buttons.autoMenu(connection.checkUserStatus(user_id)[0]))
			await state.finish()
		
		else:
			await bot.answer_callback_query(c.id, show_alert = True, text = "‚ùóÔ∏è–í—ã –Ω–µ –æ–ø–ª–∞—Ç–∏–ª–∏ —Å—á–µ—Ç!")

	except Exception as e:
		print(e)
		await c.answer()
		await bot.send_message(c.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–ª–∏ —É—Ç–µ–∫–ª–∏ —Å—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!")

	
# -----BUY COUPONS-----
async def callback_buy_cupons(c: types.CallbackQuery, state: FSMContext):
	await c.answer()
	await bot.send_photo(
		chat_id = c.from_user.id, 
		photo = file_ids.PHOTO['agreement'],
		caption = "–¢–æ—Ä–≥—É–µ—Ç—Å—è –ª–æ—Ç ‚Ññ1\n"
				  "–í –Ω–∞–ª–∏—á–∏–∏: 25.000 —à—Ç\n"
				  "  –¶–µ–Ω–∞ –∫—É–ø–æ–Ω–∞: 1—à—Ç = 1.00 ‚ÇΩ\n"
				  "  –î–æ—Ö–æ–¥ –æ—Ç –ø—Ä–∏–±—ã–ª–∏: 0.00008%",
		reply_markup = buttons.getCouponsBtn()
		)


async def callback_buy_cpn(c: types.CallbackQuery, state: FSMContext):
	await c.answer()
	await BuyCoupon.step1.set()
	await c.message.answer("–°–∫–æ–ª—å–∫–æ –∫—É–ø–æ–Ω–æ–≤ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏?",
			reply_markup = buttons.back_canc)


async def process_buy_coupons(message: types.Message, state: FSMContext):
	if message.text.isdigit():
		async with state.proxy() as data:
			data['price'] = message.text
			
			await message.answer(
				"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ\n"
				f"–ü–æ–∫—É–ø–∫–∞ –∫—É–ø–æ–Ω–æ–≤: <code>{message.text} —à—Ç</code>\n" 
				f"  –ö –æ–ø–ª–∞—Ç–µ: <code>{float(message.text)}‚ÇΩ</code>",
					reply_markup = buttons.getPayCpnsBtn())

	else:
		await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏!")		



async def callback_refresh_cpns(c: types.CallbackQuery, state: FSMContext):
	await c.answer()


async def callback_pay_cpns(c: types.CallbackQuery, state: FSMContext):
	async with state.proxy() as data:
		user_id = c.from_user.id
		price = int(data['price'])
		today = datetime.datetime.today()
		user_balance = int(connection.get_id(user_id)[6])
			

		if user_balance >= price:
			connection.addCoupon(user_id, price)
			connection.addPayment(user_id, 'coupon', price, today, price)
			connection.updateBalance(user_id, price, '-')
			await bot.answer_callback_query(c.id, show_alert = True, text = "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:\n\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
			await c.message.delete()
			await bot.send_message(c.from_user.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup = buttons.autoMenu(connection.checkUserStatus(c.from_user.id)[0]))
			await state.finish()
		
		else:
			await bot.answer_callback_query(c.id, show_alert = True, text = "‚ö†Ô∏è –û—à–∏–±–∫–∞:\n\n"
																		    "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")


# ----STATISTICS----
async def callback_stat(c: types.CallbackQuery, state: FSMContext):
	await c.answer()	
	user_id = c.from_user.id

	today = datetime.datetime.today()
	per_month = datetime.timedelta

	top_up_this_month = connection.selectStatPayments(user_id, 'refill', today-per_month(days=30), today)
	top_up_last_month = connection.selectStatPayments(user_id, 'refill', today-per_month(days=60), today-per_month(days=30))

	withdraw_this_month = connection.selectStatPayments(user_id, 'withdraw', today-per_month(days=30), today)
	withdraw_last_month = connection.selectStatPayments(user_id, 'withdraw', today-per_month(days=60), today-per_month(days=30))

	coupon_count_this_month = connection.selectStatPayments(user_id, 'coupon_count', today-per_month(days=30), today)
	coupon_count_last_month = connection.selectStatPayments(user_id, 'coupon_count', today-per_month(days=60), today-per_month(days=30))

	active_refferals_this_month = connection.selectStatRefferal(user_id, 'active', today-per_month(days=30), today)
	active_refferals_last_month = connection.selectStatRefferal(user_id, 'active', today-per_month(days=60), today-per_month(days=30))

	non_active_refferals_this_month = connection.selectStatRefferal(user_id, user_id, today-per_month(days=30), today)
	non_active_refferals_last_month = connection.selectStatRefferal(user_id, user_id, today-per_month(days=60), today-per_month(days=30))


	await bot.send_message(c.from_user.id, "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ</b>\n\n"

					"<b>–ü–æ–ø–æ–ª–Ω–∏–ª–∏ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü:</b>\n"
					f"‚îî  <code>{float(sum(top_up_this_month))} ‚ÇΩ</code>\n"
					"<b>  –ó–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü:</b>\n"
					f"  ‚îî  <code>{float(sum(top_up_last_month))} ‚ÇΩ</code>\n\n"

					"<b>–í—ã–≤–µ–ª–∏ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü:</b>\n"
					f"‚îî  <code>{float(sum(withdraw_this_month))} ‚ÇΩ</code>\n"
					"  <b>–ó–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü:</b>\n"
					f"  ‚îî  <code>{float(sum(withdraw_last_month))} ‚ÇΩ</code>\n\n\n"


					"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—É–ø–æ–Ω–æ–≤</b>\n\n"

					"<b>–ö—É–ø–ª–µ–Ω–æ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü:</b>\n"
					f"‚îî  <code>{sum(coupon_count_this_month)} —à—Ç</code>\n"
					"  <b>–ó–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü:</b>\n"
					f"  ‚îî  <code>{sum(coupon_count_last_month)} —à—Ç</code>\n\n"

					"<b>–í—ã–ø–ª–∞—á–µ–Ω–æ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü:</b>\n"
					f"‚îî <code>{float(sum(coupon_count_this_month))} ‚ÇΩ</code>\n"
					"  <b>–ó–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü:</b>\n"
					f"  ‚îî  <code>{float(sum(coupon_count_last_month))} ‚ÇΩ</code>\n\n\n"


					"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</b>\n\n"

					"<b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü:</b>\n"
					f"‚îî <code>{active_refferals_this_month[0]} —É—á</code>\n"
					"  <b>–ó–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü:</b>\n"
					f"  ‚îî  <code>{active_refferals_last_month[0]} —É—á</code>\n\n"

					"<b>–û–∂–∏–¥–∞—é—â–∏—Ö –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü:</b>\n"
					f"‚îî  <code>{non_active_refferals_this_month[0]} —É—á</code>\n"
					"  <b>–ó–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü:</b>\n"
					f"  ‚îî  <code>{non_active_refferals_last_month[0]} —É—á</code>\n\n"

					"<b>–í—ã–ø–ª–∞—á–µ–Ω–æ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü:</b>\n"
					f"‚îî  <code>{float(int(active_refferals_this_month[0])*0.5)} ‚ÇΩ</code>\n"
					"  <b>–ó–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü:</b>\n"
					f"  ‚îî  <code>{float(int(active_refferals_last_month[0])*0.5)} ‚ÇΩ</code>")


def register_bot_payment_handlers(dp: Dispatcher):
	dp.register_callback_query_handler(callback_bank, lambda c: c.data == 'bank',  state = '*')
	
	dp.register_callback_query_handler(callback_withdraw, lambda c: c.data == 'withdraw',  state = '*')
	dp.register_callback_query_handler(callback_withdraw, lambda c: c.data == 'change_withdraw',  state = '*')
	dp.register_callback_query_handler(callback_pay_with_card, lambda c: c.data == 'card',  state = '*')
	dp.register_callback_query_handler(callback_pay_with_purse, lambda c: c.data == 'purse',  state = '*')	
	dp.register_message_handler(process_withdraw, state = WithDraw.step1)
	dp.register_message_handler(process_withdraw_check, state = WithDraw.step2)
	dp.register_callback_query_handler(callback_confirm, lambda c: c.data == 'confirm',  state = '*')	

	dp.register_callback_query_handler(callback_top_up, lambda c: c.data == 'top_up',  state = '*')
	dp.register_message_handler(process_top_up, state = TopUp.step1)
	dp.register_callback_query_handler(check_payment, lambda c: c.data.startswith('check'),  state = '*')

	dp.register_callback_query_handler(callback_buy_cupons, lambda c: c.data == 'buy_cupons',  state = '*')
	dp.register_callback_query_handler(callback_buy_cpn, lambda c: c.data == 'buy_cpn',  state = '*')
	dp.register_message_handler(process_buy_coupons, state = BuyCoupon.step1)
	dp.register_callback_query_handler(callback_pay_cpns, lambda c: c.data == 'pay_cpn',  state = '*')

	dp.register_callback_query_handler(callback_refresh_cpns, lambda c: c.data == 'refresh_cpn',  state = '*')

	dp.register_callback_query_handler(callback_stat, lambda c: c.data == 'stat',  state = '*')