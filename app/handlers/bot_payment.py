import asyncio
import random
import datetime
import pyqiwi
from pyqiwip2p import QiwiP2P

from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from app.qiwi import Payment
from app.admin.admin_connection import selectStatuses
from .. import buttons, config, connection, file_ids


class TopUp(StatesGroup):
	step1 = State()


class WithDraw(StatesGroup):
	step1 = State()
	step2 = State()
	step3 = State()


class BuyCoupon(StatesGroup):
	step1 = State()


bot = Bot(token=config.TOKEN, parse_mode = 'html')
p2p = QiwiP2P(auth_key = config.QIWI_P2P_TOKEN)
wallet = pyqiwi.Wallet(token = config.QIWI_TOKEN, number = config.QIWI_NUMBER)


def checkPaymentStatus(name):
	def decorator(func):
		async def wrapper(c: types.CallbackQuery, state: FSMContext):
			if selectStatuses(name) == 'üî¥':
				await c.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞:\n\n"
							   "–§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞, –∏–¥—É—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞! üò¢", show_alert = True)
			else:
				return await func(c, state)
		return wrapper
	return decorator


async def callback_bank(c: types.CallbackQuery, state: FSMContext):
	user_id = c.from_user.id
	await c.answer()

	# try:
	# response = connection.selectMyJob(user_id)
	# date = response[4].split(',')
	# total_days = int(response[-1])
	# orderData = connection.selectOrderWhereCusId(response[0], response[1])
	# payment_for_waiting = int(orderData[-1])
	# date1 = datetime.datetime.now()
	# date2 = datetime.datetime(day=int(date[2]), month=int(date[1]), year=int(date[0]))
	# timedelta = date1-date2
	# result_date = (timedelta.seconds)
	# result_minutes = ((result_date % 3600) // 60) - total_days - 3
	# print(result_minutes)

	# 	if result_minutes >= 1:
	# 		connection.updateBalance(user_id, result_minutes*payment_for_waiting, '+')
	# 		connection.updateTotalDays(result_minutes, user_id)
	# 		connection.addBotPayment(user_id, 'payment_for_waiting', result_minutes*payment_for_waiting, date1)
				
	# except Exception as e:
	# 	print(e)

	balance = connection.checkReferral(user_id)
	coupons = connection.getUserCpns(user_id)[0]
	await bot.send_photo(
		chat_id = c.from_user.id, 
		photo = file_ids.PHOTO['bank'],
		caption = f"<b>–ë–∞–ª–∞–Ω—Å:</b> <code>{float(balance[6])} ‚ÇΩ</code>\n\n"
				  f"<b>–ö—É–ø–æ–Ω VALYVE:</b> <code>{coupons} —à—Ç</code>\n\n"
				  f"<b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞</b>\n"
				  f"‚îú <b>–ê–∫—Ç–∏–≤–Ω—ã—Ö:</b> <code>{balance[5]} —É—á</code>\n"
				  f"‚îî <b>–û–∂–∏–¥–∞–Ω–∏–µ:</b> <code>{balance[4]} —É—á</code>\n\n"
				  f"üó£ <b>–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞</b>\n"
				  f"‚îî <a href='https://t.me/ValyveExchange_bot?start={user_id}'>–ó–∞–∂–º–∏ —á—Ç–æ–± —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å</a>",
					reply_markup = buttons.referral_settings)


# -----Withdraw----
@checkPaymentStatus('WITHDRAW')
async def callback_withdraw(c: types.CallbackQuery, state: FSMContext):
	user_id = c.from_user.id

	if connection.get_id(user_id)[6]:
		await c.answer()
		await WithDraw.step1.set()
		await bot.send_message(c.from_user.id, "–ù–∞  –∫–∞–∫—É—é —Å—É–º–º—É –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥?", 
			reply_markup = buttons.back_canc)

	else:
		await c.answer(show_alert = True, text = "‚ö†Ô∏è –û—à–∏–±–∫–∞:\n\n"
						"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")


@checkPaymentStatus('WITHDRAW')
async def process_withdraw(message: types.Message, state: FSMContext):
	user_id = message.from_user.id
	today = datetime.datetime.today()

	history = int(connection.getWithDraw(user_id, today))
	print(history)

	if message.text.isdigit():
		if int(message.text) <= connection.get_id(user_id)[6]:
			if history <= 2000 and int(message.text) <= 2000 and int(message.text) >= 100:
				async with state.proxy() as data:
					data['user_money'] = message.text

				commission = wallet.commission(pid=99, recipient=config.QIWI_NUMBER, amount=int(message.text))
				await message.answer("<b>–ö–æ–º–∏—Å—Å–∏—è Qiwi</b>\n" 
									f"<b>–ö–∞—Ä—Ç–∞:</b> <code>2% + 50.00 ‚ÇΩ</code>\n" 
									"<b>‚îîQiwi –ö–æ—à–µ–ª—ë–∫:</b> <code>2%</code>")
				await message.answer("<b>–ù–∞ —á—Ç–æ –í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞?</b>",
										reply_markup = buttons.withdrawBtns())

			else:
				await message.answer(
					"‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b>\n\n"

					"–í—ã–≤–æ–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω! –í—ã–≤–æ–¥ –≤–æ–∑–º–æ–∂–µ–Ω 1 —Ä–∞–∑ –≤ –¥–µ–Ω—å, –æ—Ç 100 –¥–æ 2000 —Ä—É–±–ª–µ–π."
					)

		else:
			await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞:\n\n"
								 "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
	else:
		await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞:\n\n"
							 "–í–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏!")


@checkPaymentStatus('WITHDRAW')
async def callback_pay_with_card(c: types.CallbackQuery, state: FSMContext):
	await c.answer()	

	async with state.proxy() as data:
		data['type'] = 'card'

	await WithDraw.step2.set()
	await c.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –∫–∞—Ä—Ç—ã, –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –Ω–µ—ë.")


@checkPaymentStatus('WITHDRAW')
async def callback_pay_with_purse(c: types.CallbackQuery, state: FSMContext):
	await c.answer()

	async with state.proxy() as data:
		data['type'] = 'purse'

	await WithDraw.step3.set()
	await c.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–æ—à–µ–ª—å–∫—É.")


@checkPaymentStatus('WITHDRAW')
async def process_withdraw_check_card(message: types.Message, state: FSMContext):
	user_id = message.from_user.id	

	if message.text.isdigit():
		async with state.proxy() as data:
			data['recipient'] = message.text
			user_money = data['user_money']

			await message.answer(  "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –≤—ã–≤–æ–¥–µ</b>\n" 
								   f"<b>–°–ø–∏—Å–∞–Ω–∏–µ:</b> <code>{float(int(user_money)+int(user_money)/100*2+50)} ‚ÇΩ</code>\n"
								   f"<b>–ó–∞—á–∏—Å–ª–µ–Ω–∏–µ:</b> <code>{float(user_money)}</code>\n"
								   f"<b>–ö–∞—Ä—Ç–∞:</b> <code>{message.text}</code>",
										reply_markup = buttons.withdrawCheckBtns())

	else:
		await message.answer("‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:\n\n"
					 "–í–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏!")


@checkPaymentStatus('WITHDRAW')
async def process_withdraw_check_purse(message: types.Message, state: FSMContext):
	user_id = message.from_user.id	

	if message.text.isdigit():
		async with state.proxy() as data:
			data['recipient'] = message.text
			user_money = int(data['user_money'])

			await message.answer(  "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –≤—ã–≤–æ–¥–µ</b>\n" 
								   f"<b>–ö –≤—ã–≤–æ–¥—É:</b> <code>{user_money + user_money/100*2} ‚ÇΩ</code>\n"
								   f"<b>–ù–∞ –∫–æ—à–µ–ª—ë–∫:</b> <code>{message.text}</code>",
										reply_markup = buttons.withdrawCheckBtns())

	else:
		await message.answer("‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b>\n\n"
					 "–í–≤–æ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏!")		


@checkPaymentStatus('WITHDRAW')
async def callback_confirm(c: types.CallbackQuery, state: FSMContext):
	async with state.proxy() as data:
		type_card = data['type']
		user_id = c.from_user.id
		recipient = data['recipient']
		user_money = data['user_money']
		comment = (f"{user_id}_{random.randint(1000, 9999)}")
	
	if type_card == 'card':
		prv_id = Payment.get_card_system(recipient)
		payment_data = {'sum': user_money,
						'to_card': recipient,
						'prv_id': prv_id}
		answer_from_qiwi = Payment.send_to_card(payment_data)

		try:
			status_transaction = answer_from_qiwi["transaction"]["state"]
			if status_transaction['code'] == "Accepted":
				today = datetime.datetime.today()
				fee_with_commission = int(user_money)+int(user_money)/100*2+50
				connection.addBotPayment(user_id, 'withdraw', fee_with_commission, today)
				connection.updateBalance(user_id, fee_with_commission, '-')
				await c.message.answer("üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:</b>\n\n–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É!\n–û–∂–∏–¥–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24—Ö —á–∞—Å–æ–≤.")

		except Exception as e:
			print(answer_from_qiwi)
			print(e, type(e))
			await c.message.answer("‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b>\n\n"
				"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—Ä—Ç–∞/–Ω–æ–º–µ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è !")

			await state.finish()


	elif type_card == 'purse':
		answer_from_qiwi = Payment.send_to_qiwi(recipient, user_money)
		try:
			status_transaction = answer_from_qiwi["transaction"]["state"]
			
			if status_transaction['code'] == "Accepted":
				today = datetime.datetime.today()
				fee_with_commission = int(user_money)+int(user_money)/100*2+50
				connection.addBotPayment(user_id, 'withdraw', fee_with_commission, today)
				connection.updateBalance(user_id, fee_with_commission, '-')
				await c.message.answer("üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:</b>\n\n–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É!\n–û–∂–∏–¥–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24—Ö —á–∞—Å–æ–≤.")

		except Exception as e:
			print(e, type(e))
			await c.message.answer("‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b>\n\n"
				"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—Ä—Ç–∞/–Ω–æ–º–µ—Ä –ø–æ–ª—É—á–∞—Ç–µ–ª—è !")

			await state.finish()


# ---------TOP UP-----------
@checkPaymentStatus('REPLENISHMENT')
async def callback_top_up(c: types.CallbackQuery, state: FSMContext):
	await c.answer()
	user_id = c.from_user.id

	await TopUp.step1.set()
	await bot.send_message(c.from_user.id, "–ù–∞ –∫–∞–∫—É—é —Å—É–º–º—É –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å–≤–æ–π –±–∞–ª–∞–Ω—Å?", 
			reply_markup = buttons.back_canc)
	

@checkPaymentStatus('REPLENISHMENT')
async def process_top_up(message: types.Message, state: FSMContext):
	if message.text.isdigit():
		user_id = message.from_user.id
		user_money = int(message.text)
		comment = (f"{user_id}_{random.randint(1000, 9999)}")
		bill = p2p.bill(amount=user_money, lifetime=15, comment=comment)

		await message.answer(f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ</b>\n<b>–ö –∑–∞—á–∏—Å–ª–µ–Ω–∏:</b> <code>{float(message.text)} ‚ÇΩ</code>", 
			reply_markup = buttons.showPayment(bill_id = bill.bill_id, url = bill.pay_url, price = user_money))	


@checkPaymentStatus('REPLENISHMENT')
async def check_payment(c: types.CallbackQuery, state: FSMContext):
	try:
		user_id = c.from_user.id
		ids = c.data[6:].split(',')
		bill = ids[0]
		price = ids[1]
		today = datetime.datetime.today()

		if str(p2p.check(bill_id = bill).status) == "PAID":

			connection.updateBalance(user_id, price, '+')
			connection.addPayment(user_id, 'top_up', price, today)

			await c.message.delete()
			await c.answer("üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:</b>\n\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!",
								show_alert = True)

			await c.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup = buttons.autoMenu(connection.checkUserStatus(user_id)[0]))
			await state.finish()
		
		else:
			await c.answer( "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b>"
							"–û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –±–æ—Ç–∞",
								show_alert = True)

	except Exception as e:
		print(e)
		await c.answer()
		await bot.send_message(c.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–ª–∏ —É—Ç–µ–∫–ª–∏ —Å—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö. <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!</b>")

	
# -----BUY COUPONS-----
async def callback_buy_cupons(c: types.CallbackQuery, state: FSMContext):
	# user_cpn_list = [25000, 50000, 75000, 100000, 125000, 150000, 175000, 200000, 225000, 250000]

	# user_id = c.from_user.id
	# user_cpns = connection.getUserCpns(user_id)[0]
	# lot = int(user_cpns) // 25000
	# available = user_cpn_list[lot] - int(user_cpns)

	# if lot > 10:
	# 	await c.answer("–í—ã —É–∂–µ –∫—É–ø–∏–ª–∏ –≤—Å–µ –∫—É–ø–æ–Ω—ã!", show_alert = True)

	await c.answer()
	# await bot.send_photo(
	# 	chat_id = c.from_user.id, 
	# 	photo = file_ids.PHOTO['raccoon'],
	# 	caption = f"<b>–¢–æ—Ä–≥—É–µ—Ç—Å—è –ª–æ—Ç ‚Ññ{lot+1}</b>\n"
	# 			  f"<b>–í –Ω–∞–ª–∏—á–∏–∏:</b> <code>{available} —à—Ç</code>\n"
	# 			  f"  <b>–¶–µ–Ω–∞ –∫—É–ø–æ–Ω–∞:</b> <code>1—à—Ç</code> = <code>{float(lot+1)} ‚ÇΩ</code>\n"
	# 			   "  <b>–î–æ—Ö–æ–¥ –æ—Ç –ø—Ä–∏–±—ã–ª–∏:</b> 0.00008%",
	# 	reply_markup = buttons.getCouponsBtn()
	# 	)


async def callback_buy_cpn(c: types.CallbackQuery, state: FSMContext):
	await c.answer()
	await BuyCoupon.step1.set()
	await c.message.answer("–°–∫–æ–ª—å–∫–æ –∫—É–ø–æ–Ω–æ–≤ –í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏?",
			reply_markup = buttons.back_canc)


async def process_buy_coupons(message: types.Message, state: FSMContext):
	user_cpn_list = [25000, 50000, 75000, 100000, 125000, 150000, 175000, 200000, 225000, 250000]

	user_id = message.from_user.id
	user_cpns = connection.getUserCpns(user_id)[0]
	lot = int(user_cpns) // 25000
	available = user_cpn_list[lot] - int(user_cpns)

	if message.text.isdigit():

		if int(message.text) <= 25000:
			if int(message.text) <= available:
				async with state.proxy() as data:
					data['price'] = message.text
					
					await message.answer(
						"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–ø–ª–∞—Ç–µ</b>\n"
						f"<b>–ü–æ–∫—É–ø–∫–∞ –∫—É–ø–æ–Ω–æ–≤:</b> <code>{message.text} —à—Ç</code>\n" 
						f"  <b>–ö –æ–ø–ª–∞—Ç–µ:</b> <code>{float(int(message.text)*(lot+1))}‚ÇΩ</code>",
							reply_markup = buttons.getPayCpnsBtn())

			else:
				await message.answer(f"–ù–∞ –≤–∞—à–µ–º –ª–æ—Ç–µ –æ—Å—Ç–∞–ª–æ—Å—å <code>{available}</code>—à—Ç. –∫—É–ø–æ–Ω–æ–≤")
		else:
			await message.answer("–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –≤ –æ–¥–Ω–æ–º –ª–æ—Ç–µ –º–∞–∫—Å–∏–º—É–º <code>25000</code> –∫—É–ø–æ–Ω–æ–≤.")

	else:
		await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏!")		



# async def callback_refresh_cpns(c: types.CallbackQuery, state: FSMContext):
# 	await c.answer()


async def callback_pay_cpns(c: types.CallbackQuery, state: FSMContext):
	async with state.proxy() as data:
		user_id = c.from_user.id
		price = int(data['price'])
		today = datetime.datetime.today()
		user_balance = int(connection.get_id(user_id)[6])
			

		if user_balance >= price:
			connection.addCoupon(user_id, price)
			connection.addPayment(user_id, 'coupon', price, today, price)
			connection.updateBalance(user_id, price, '-')
			await bot.answer_callback_query(c.id, show_alert = True, text = "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:</b>\n\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
			await c.message.delete()
			await bot.send_message(c.from_user.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup = buttons.autoMenu(connection.checkUserStatus(c.from_user.id)[0]))
			await state.finish()
		
		else:
			await bot.answer_callback_query(c.id, show_alert = True, text = "‚ö†Ô∏è –û—à–∏–±–∫–∞:\n\n"
																			"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")


# ----STATISTICS----
async def callback_stat(c: types.CallbackQuery, state: FSMContext):
	await c.answer()	
	user_id = c.from_user.id

	today = datetime.datetime.today()
	per_month = datetime.timedelta

	top_up_this_month = connection.selectStatPayments(user_id, 'refill', today-per_month(days=30), today)
	top_up_last_month = connection.selectStatPayments(user_id, 'refill', today-per_month(days=60), today-per_month(days=30))

	withdraw_this_month = connection.selectStatPayments(user_id, 'withdraw', today-per_month(days=30), today)
	withdraw_last_month = connection.selectStatPayments(user_id, 'withdraw', today-per_month(days=60), today-per_month(days=30))

	coupon_count_this_month = connection.selectStatPayments(user_id, 'coupon_count', today-per_month(days=30), today)
	coupon_count_last_month = connection.selectStatPayments(user_id, 'coupon_count', today-per_month(days=60), today-per_month(days=30))

	active_refferals_this_month = connection.selectStatRefferal(user_id, 'active', today-per_month(days=30), today)
	active_refferals_last_month = connection.selectStatRefferal(user_id, 'active', today-per_month(days=60), today-per_month(days=30))

	non_active_refferals_this_month = connection.selectStatRefferal(user_id, user_id, today-per_month(days=30), today)
	non_active_refferals_last_month = connection.selectStatRefferal(user_id, user_id, today-per_month(days=60), today-per_month(days=30))


	await bot.send_message(c.from_user.id, 
					"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ</b>\n\n"

					"<b>–ü–æ–ø–æ–ª–Ω–∏–ª–∏ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü:</b>\n"
					f"‚îî  <code>{float(sum(top_up_this_month))} ‚ÇΩ</code>\n"
					"<b>  –ó–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü:</b>\n"
					f"  ‚îî  <code>{float(sum(top_up_last_month))} ‚ÇΩ</code>\n\n"

					"<b>–í—ã–≤–µ–ª–∏ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü:</b>\n"
					f"‚îî  <code>{float(sum(withdraw_this_month))} ‚ÇΩ</code>\n"
					"  <b>–ó–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü:</b>\n"
					f"  ‚îî  <code>{float(sum(withdraw_last_month))} ‚ÇΩ</code>\n\n\n"


					"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—É–ø–æ–Ω–æ–≤</b>\n\n"

					"<b>–ö—É–ø–ª–µ–Ω–æ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü:</b>\n"
					f"‚îî  <code>{sum(coupon_count_this_month)} —à—Ç</code>\n"
					"  <b>–ó–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü:</b>\n"
					f"  ‚îî  <code>{sum(coupon_count_last_month)} —à—Ç</code>\n\n"

					"<b>–í—ã–ø–ª–∞—á–µ–Ω–æ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü:</b>\n"
					f"‚îî <code>{float(sum(coupon_count_this_month))} ‚ÇΩ</code>\n"
					"  <b>–ó–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü:</b>\n"
					f"  ‚îî  <code>{float(sum(coupon_count_last_month))} ‚ÇΩ</code>\n\n\n"


					"<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤</b>\n\n"

					"<b>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü:</b>\n"
					f"‚îî <code>{active_refferals_this_month[0]} —É—á</code>\n"
					"  <b>–ó–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü:</b>\n"
					f"  ‚îî  <code>{active_refferals_last_month[0]} —É—á</code>\n\n"

					"<b>–û–∂–∏–¥–∞—é—â–∏—Ö –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü:</b>\n"
					f"‚îî  <code>{non_active_refferals_this_month[0]} —É—á</code>\n"
					"  <b>–ó–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü:</b>\n"
					f"  ‚îî  <code>{non_active_refferals_last_month[0]} —É—á</code>\n\n"

					"<b>–í—ã–ø–ª–∞—á–µ–Ω–æ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü:</b>\n"
					f"‚îî  <code>{float(int(active_refferals_this_month[0])*0.5)} ‚ÇΩ</code>\n"
					"  <b>–ó–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü:</b>\n"
					f"  ‚îî  <code>{float(int(active_refferals_last_month[0])*0.5)} ‚ÇΩ</code>")


def register_bot_payment_handlers(dp: Dispatcher):
	dp.register_callback_query_handler(callback_bank, lambda c: c.data == 'bank',  state = '*')
	
	dp.register_callback_query_handler(callback_withdraw, lambda c: c.data == 'withdraw',  state = '*')
	dp.register_callback_query_handler(callback_withdraw, lambda c: c.data == 'change_withdraw',  state = '*')
	dp.register_callback_query_handler(callback_pay_with_card, lambda c: c.data == 'card',  state = '*')
	dp.register_callback_query_handler(callback_pay_with_purse, lambda c: c.data == 'purse',  state = '*')	
	dp.register_message_handler(process_withdraw, state = WithDraw.step1)
	dp.register_message_handler(process_withdraw_check_card, state = WithDraw.step2)
	dp.register_message_handler(process_withdraw_check_purse, state = WithDraw.step3)
	dp.register_callback_query_handler(callback_confirm, lambda c: c.data == 'confirm',  state = '*')	

	dp.register_callback_query_handler(callback_top_up, lambda c: c.data == 'top_up',  state = '*')
	dp.register_message_handler(process_top_up, state = TopUp.step1)
	dp.register_callback_query_handler(check_payment, lambda c: c.data.startswith('check'),  state = '*')

	dp.register_callback_query_handler(callback_buy_cupons, lambda c: c.data == 'buy_cupons',  state = '*')
	dp.register_callback_query_handler(callback_buy_cpn, lambda c: c.data == 'buy_cpn',  state = '*')
	dp.register_message_handler(process_buy_coupons, state = BuyCoupon.step1)
	dp.register_callback_query_handler(callback_pay_cpns, lambda c: c.data == 'pay_cpn',  state = '*')

	# dp.register_callback_query_handler(callback_refresh_cpns, lambda c: ,  state = '*')

	dp.register_callback_query_handler(callback_stat, lambda c: c.data == 'stat',  state = '*')