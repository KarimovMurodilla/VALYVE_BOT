import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from .. import connection, file_ids, buttons, config
from app.admin import admin_connection


bot = Bot(token=config.TOKEN, parse_mode = 'html')


class RegCustomer(StatesGroup):
	step1 = State()
	step2 = State()
	step3 = State()
	step4 = State()



def checkStatusUser(func):
	async def wrapper(message: types.Message, state: FSMContext):
		user_id = message.from_user.id
		try:
			if not connection.checkUserStatus(user_id)[0]:
				await bot.send_photo(message.chat.id, photo = file_ids.PHOTO['agreement'], caption = "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å <a href = 'https://ru.wikipedia.org/wiki/%D0%9F%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8C%D1%81%D0%BA%D0%BE%D0%B5_%D1%81%D0%BE%D0%B3%D0%BB%D0%B0%D1%88%D0%B5%D0%BD%D0%B8%D0%B5'>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –¥–æ–≥–æ–≤–æ—Ä–æ–º</a> –∏ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –Ω–∏–º —á—Ç–æ–± –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞.", reply_markup = buttons.btn)

			else:
				return await func(message, state)

		except TypeError:
			await bot.send_photo(message.chat.id, photo = file_ids.PHOTO['agreement'], caption = "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å <a href = 'https://ru.wikipedia.org/wiki/%D0%9F%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D1%82%D0%B5%D0%BB%D1%8C%D1%81%D0%BA%D0%BE%D0%B5_%D1%81%D0%BE%D0%B3%D0%BB%D0%B0%D1%88%D0%B5%D0%BD%D0%B8%D0%B5'>–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –¥–æ–≥–æ–≤–æ—Ä–æ–º</a> –∏ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å –Ω–∏–º —á—Ç–æ–± –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞.", reply_markup = buttons.btn)

	return wrapper



async def process_set_reg_state(c: types.CallbackQuery, state: FSMContext):
	await RegCustomer.step1.set()
	await bot.delete_message(c.message.chat.id, c.message.message_id)
	await bot.send_message(c.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –í–∞—à–µ –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ,  –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –í–∞—Å.",
		reply_markup = buttons.back_canc)


async def process_reg1(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		data['name'] = message.text

	await RegCustomer.next()
	await bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –í–∞—à–µ —Ñ–æ—Ç–æ, —ç—Ç–æ –≤—ã–∑–æ–≤–µ—Ç –±–æ–ª—å—à–µ –¥–æ–≤–µ—Ä–∏—è –∫ –í–∞—à–∏–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ–º.",
		reply_markup = buttons.nope)


async def process_img(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		data['photo'] = message.photo[-1].file_id

	await RegCustomer.next()
	await bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –¥–ª—è —Å–≤—è–∑–∏ –ø–æ —Ä–∞–±–æ—Ç–µ.",
		reply_markup = buttons.contact)


async def process_contact_and_all_data(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		data['contact'] = message.contact.phone_number

		cus_id = message.from_user.id
		cus_name = data['name']
		cus_pic = data['photo']
		cus_contact = data['contact']
		date_registration = datetime.datetime.today().strftime('%d.%m.%Y - %H:%M')
		
		if not connection.checkRegStatus(cus_id):
			connection.RegData(cus_id, cus_name, cus_pic, cus_contact, date_registration)
			await bot.send_message(message.chat.id, "<b>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:</b>\n\n" 
								                    "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",reply_markup = buttons.menu_customer)

		else:
			# connection.UpdateData(cus_id, cus_name, cus_pic, cus_contact, date_registration)
			await bot.send_message(message.chat.id, "<b>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:</b>\n\n" 
													"–í–∞—à –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫.", reply_markup = buttons.menu_customer)			
			status = connection.checkUserStatus(message.from_user.id)[0]
			admin_connection.addRequestProfil(cus_id, status, cus_name, cus_pic, cus_contact)

	await state.finish()


async def cancel_handler(message: types.Message, state: FSMContext):
	await state.finish()
	user_id = message.chat.id
	user_status = connection.checkUserStatus(user_id)

	if user_status[0] == 'customer':
		await bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup = buttons.menu_customer)
		await state.finish()

	elif user_status[0] == 'executor':
		await bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup = buttons.menu_executor)
		# await state.finish()   


async def process_contact_if_not_img(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		data['contact'] = message.contact.phone_number

		cus_id = message.from_user.id
		cus_name = data['name']
		cus_pic = 'AgACAgIAAxkBAAOvYW5woS9KTofLU3EqNCIoo3jTWx0AAhezMRt7rXhL5FS-aNbKWN8BAAMCAAN5AAMhBA'
		cus_contact = data['contact']
		date_registration = datetime.datetime.today().strftime('%d.%m.%Y - %H:%M')
		
		if not connection.checkRegStatus(cus_id):
			connection.RegData(cus_id, cus_name, cus_pic, cus_contact, date_registration)
			await bot.send_message(message.chat.id, "<b>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:</b>\n\n"
								                    "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", reply_markup = buttons.menu_customer)

		else:
			# connection.UpdateData(cus_id, cus_name, cus_pic, cus_contact, date_registration)
			await bot.send_message(message.chat.id, "<b>üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:</b>\n\n" 
													"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24—Ö —á–∞—Å–æ–≤!", reply_markup = buttons.menu_customer)
			status = connection.checkUserStatus(message.from_user.id)[0]
			admin_connection.addRequestProfil(cus_id, status, cus_name, cus_pic, cus_contact)

	await state.finish()


async def process_edit_profil(c: types.CallbackQuery, state: FSMContext):
	cus_id = c.from_user.id

	if connection.checkReferral(cus_id)[3] == 'Banned':
		await bot.send_message(message.chat.id, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–±–∞–Ω–µ–Ω!")

	else:
		await RegCustomer.step1.set()
		await bot.send_message(c.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –í–∞—à–µ –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ,  –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –í–∞—Å.",
			reply_markup = buttons.back_canc)


async def process_no_img(c: types.CallbackQuery, state: FSMContext):
	await RegCustomer.step4.set()
	
	await bot.delete_message(c.message.chat.id, c.message.message_id)		
	await bot.send_message(c.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –¥–ª—è —Å–≤—è–∑–∏ –ø–æ —Ä–∞–±–æ—Ç–µ.",
		reply_markup = buttons.contact)
	

@checkStatusUser
async def my_orders(message: types.Message, state: FSMContext):
	cus_id = message.from_user.id
	
	if not connection.checkRegStatus(cus_id):
		await bot.send_message(message.chat.id, "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞.", reply_markup = buttons.create_account)


	else:
		if connection.checkReferral(cus_id)[3] == 'Banned':
			await bot.send_message(message.chat.id, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–±–∞–Ω–µ–Ω!")
			
		elif connection.selectAll(cus_id)[3] == 'Banned':
			await bot.send_message(message.chat.id, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞ –∑–∞–±–∞–Ω–µ–Ω!")

		else:
			await bot.send_message(message.chat.id, "–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–∫–∞–∑—ã –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑?", reply_markup = buttons.get_orders(cus_id))


@checkStatusUser
async def my_cab(message: types.Message, state: FSMContext):
	cus_id = message.from_user.id

	if not connection.checkRegStatus(cus_id):
		await bot.send_message(message.chat.id, "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç—Ç–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞.", reply_markup = buttons.create_account)

	elif connection.selectAll(cus_id)[3] == 'Banned':
		await bot.send_message(message.chat.id, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞ –∑–∞–±–∞–Ω–µ–Ω!")
		
	else:
		alldata = connection.selectAll(cus_id)
		await bot.send_photo(message.chat.id, photo = alldata[1], caption = f'<b>{alldata[0]}</b>\n <b>–ù–æ–º–µ—Ä:</b> <code>+{alldata[2]}</code>', reply_markup = buttons.edit_profil)


@checkStatusUser
async def info(message: types.Message, state: FSMContext):
	cus_id = message.from_user.id

	if connection.checkReferral(cus_id)[3] == 'Banned':
		await bot.send_message(message.chat.id, "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∑–∞–±–∞–Ω–µ–Ω!")

	else:
		await bot.send_photo(message.chat.id, photo = file_ids.PHOTO['info'], reply_markup = buttons.info)



def register_reg_customer_profil_handlers(dp: Dispatcher):
	dp.register_message_handler(cancel_handler, text=['–û—Ç–º–µ–Ω–∏—Ç—å', '–ù–∞–∑–∞–¥', '–í—ã–π—Ç–∏ –∏–∑ –±–µ—Å–µ–¥—ã'], state='*')
	dp.register_message_handler(process_reg1, state = RegCustomer.step1)
	dp.register_message_handler(process_img, content_types = 'photo', state = RegCustomer.step2)
	dp.register_message_handler(process_contact_and_all_data, content_types = 'contact', is_sender_contact = True, state = RegCustomer.step3)
	dp.register_message_handler(process_contact_if_not_img, content_types = 'contact', is_sender_contact = True, state = RegCustomer.step4)

	dp.register_message_handler(my_orders, text='–ú–æ–∏ –∑–∞–∫–∞–∑—ã', state='*')
	dp.register_message_handler(my_cab, text='–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç', state='*')
	dp.register_message_handler(info, text='–î–æ–ø.–§—É–Ω–∫—Ü–∏–∏', state='*')

	dp.register_callback_query_handler(process_set_reg_state, lambda c: c.data == 'create_acc',  state = '*')   
	dp.register_callback_query_handler(process_edit_profil, lambda c: c.data == 'edit',  state = '*')
	dp.register_callback_query_handler(process_no_img, lambda c: c.data == 'no',  state = '*')