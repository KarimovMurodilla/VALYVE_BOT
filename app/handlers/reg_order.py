import time
import datetime
import random

from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from .. import connection, file_ids, buttons, config, getLocationInfo
from app.admin import admin_connection

bot = Bot(token=config.TOKEN, parse_mode = 'html')



class CreateOrder(StatesGroup):
	step1 = State()
	new_step = State()
	step2 = State()
	step3 = State()
	step4 = State()
	step5 = State()
	step6 = State()
	step7 = State()
	step8 = State()



def checkStatus(func):
	async def wrapper(c: types.CallbackQuery, state: FSMContext):
		if admin_connection.selectFromAdminTable()[0][1] == 'üî¥':
			await bot.send_message(c.from_user.id, "‚ö†Ô∏è –û—à–∏–±–∫–∞:\n\n"
												   "–§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞, –∏–¥—É—Ç —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã. –ü—Ä–∏–Ω–æ—Å–∏–º –∏–∑–≤–∏–Ω–µ–Ω–∏—è –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞! üò¢",
				reply_markup = buttons.menu_customer)
		else:
			return await func(c, state)
	return wrapper


@checkStatus
async def process_get_create_order(c: types.CallbackQuery, state: FSMContext):
	await c.answer()
	await c.message.delete()
	await bot.send_photo(
		chat_id = c.from_user.id,
		photo = file_ids.PHOTO_ADMIN['publication_rules'],
		caption = "- –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—ë—Ç—Å—è –≤ –ª–µ–Ω—Ç–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –í–∞–º–∏ –≤—Ä–µ–º—è, –º—ã –æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞ —Å–æ–±–æ–π –ø—Ä–∞–≤–æ –æ—Ç–∫–∞–∑–∞—Ç—å –≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ –∏–ª–∏ –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–¥ –≤–∞–∫–∞–Ω—Å–∏—é —Ä–µ–∫–ª–∞–º—ã –∏ —Ä–∞–±–æ—Ç—ã, –∑–∞–ø—Ä–µ—â–µ–Ω–Ω–æ–π –∑–∞–∫–æ–Ω–æ–º (–ó–∞–∫–ª–∞–¥–∫–∏, –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –Ω–∞—Ä–∫–æ—á–∞—Ç–æ–≤).\n\n"
				  "- –í –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–∫–∞–∑–∞–Ω–æ –µ—Å–ª–∏ –≤ –Ω—ë–º –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–µ–Ω–æ—Ä–º–∞—Ç–∏–≤–Ω–∞—è –ª–µ–∫—Å–∏–∫–∞.\n\n"
				  "- –¢–∞–∫–∂–µ –º–æ–∂–µ–º –æ—Ç–∫–∞–∑–∞—Ç—å –≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è (–ü–æ –º–Ω–µ–Ω–∏—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏).",
			reply_markup = buttons.get_understand()
		)


@checkStatus
async def process_ask_type_publication(c: types.CallbackQuery, state: FSMContext):
	await c.message.delete()
	await c.message.answer("–í–∞–º –Ω—É–∂–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –¥–ª—è —Ä–∞–∑–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –∏–ª–∏ –∂–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏ –≤ –∑–∞–ø–∞—Å?",
		reply_markup = buttons.order_type_btns())


@checkStatus
async def process_get_location(c: types.CallbackQuery, state: FSMContext):
	await c.message.delete()
	await CreateOrder.step1.set()

	async with state.proxy() as data:
		if c.data == 'stock':
			data['order_type'] = 'stock'

		elif c.data == 'on_time':
			data['order_type'] = 'on_time'

	try:
		async with state.proxy() as data:
			comment = data['comment']
			
			await bot.send_message(c.message.chat.id, ".", reply_markup = buttons.send_geo)
			await bot.send_message(c.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã, –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.",
				reply_markup = buttons.skipBtn())


	except Exception as e:
		print(e)
		await bot.send_message(c.message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é —Ä–∞–±–æ—Ç—ã, –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π.",
			reply_markup = buttons.send_geo)


@checkStatus
async def process_output_location(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		if data['order_type'] == 'stock':
			await CreateOrder.next()

		else:
			await CreateOrder.step2.set()

	try:
		async with state.proxy() as data:
			comment = data['comment']
			data['location_lat'] = message.location.latitude
			data['location_long'] = message.location.longitude
			data['adress_info'] = getLocationInfo.location_info(f"{data['location_long']} {data['location_lat']}")	
			
			await bot.send_message(message.chat.id, ".", reply_markup = buttons.back_canc)
			await bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏.",
				reply_markup = buttons.skipBtn())



	except:
		async with state.proxy() as data:
			data['location_lat'] = message.location.latitude
			data['location_long'] = message.location.longitude
			data['adress_info'] = getLocationInfo.location_info(f"{data['location_long']} {data['location_lat']}")	

			await bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏.",
				reply_markup = buttons.back_canc)


@checkStatus
async def process_output_payment_for_waiting(message: types.Message, state: FSMContext):
	await CreateOrder.next()

	try:
		async with state.proxy() as data:
			comment = data['comment']
			data['position'] = message.text
			
			await bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–∫–æ–ª—å–∫–æ –≤—ã –±—É–¥–µ—Ç–µ –ø–ª–∞—Ç–∏—Ç—å –∑–∞ 1 –¥–µ–Ω—å –æ–∂–∏–¥–∞–Ω–∏–µ.",
				reply_markup = buttons.skipBtn())


	except:
		async with state.proxy() as data:
			data['position'] = message.text

			await bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–∫–æ–ª—å–∫–æ –≤—ã –±—É–¥–µ—Ç–µ –ø–ª–∞—Ç–∏—Ç—å –∑–∞ 1 –¥–µ–Ω—å –æ–∂–∏–¥–∞–Ω–∏–µ.")

@checkStatus
async def process_output_position(message: types.Message, state: FSMContext):
	try:
		async with state.proxy() as data:
			if data['order_type'] == 'stock':
				if message.text.isdigit():
					comment = data['comment']
					data['payment_for_waiting'] = message.text
					
					await bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã.", reply_markup = buttons.skipBtn())
					await CreateOrder.step4.set()		
				else:
					await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏!")

			else:
				async with state.proxy() as data:
					comment = data['comment']
					data['position'] = message.text
					
					await bot.send_message(message.chat.id, "–ù–∞ –∫–∞–∫–æ–µ –∫–æ–ª-–≤ –¥–Ω–µ–π –≤–∞–º –Ω—É–∂–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫?", reply_markup = buttons.skipBtn())
					await CreateOrder.next()				


	except:
		if data['order_type'] == 'stock':	
			if message.text.isdigit():
				async with state.proxy() as data:
					data['payment_for_waiting'] = message.text

					await bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã.")
					await CreateOrder.step4.set()				

			else:
				await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏!")
		
		else:
			async with state.proxy() as data:
				data['position'] = message.text

				await bot.send_message(message.chat.id, "–ù–∞ –∫–∞–∫–æ–µ –∫–æ–ª-–≤ –¥–Ω–µ–π –≤–∞–º –Ω—É–∂–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫?")
				await CreateOrder.next()				


@checkStatus
async def process_output_days(message: types.Message, state: FSMContext):
	await CreateOrder.next()

	try:
		async with state.proxy() as data:
			comment = data['comment']
			data['days'] = message.text
			
			await bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã.",
				reply_markup = buttons.skipBtn())

	except:
		async with state.proxy() as data:
			data['days'] = message.text

			await bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã.")


@checkStatus
async def process_output_graphic(message: types.Message, state: FSMContext):
	await CreateOrder.next()

	try:
		async with state.proxy() as data:
			comment = data['comment']
			data['graphic'] = message.text
			
			await bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –∑–∞ —Å–º–µ–Ω—É.",
				reply_markup = buttons.skipBtn())

	except Exception as e:
		print(e)
		async with state.proxy() as data:
			data['graphic'] = message.text

			await bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –∑–∞ —Å–º–µ–Ω—É.")


@checkStatus
async def process_output_bid(message: types.Message, state: FSMContext):
	await CreateOrder.next()

	try:
		async with state.proxy() as data:
			comment = data['comment']
			data['bid'] = message.text
			
			await bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é, –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
													" - –ö–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å;\n"
													" - –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Å—Å–æ–π;\n"
													" - –û–ø—ã—Ç –æ—Ç 1 –≥–æ–¥–∞;",
														reply_markup = buttons.skipBtn())

	except:
		async with state.proxy() as data:
			data['bid'] = message.text

			await bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é, –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
													" - –ö–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å;\n"
													" - –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Å—Å–æ–π;\n"
													" - –û–ø—ã—Ç –æ—Ç 1 –≥–æ–¥–∞;")


@checkStatus
async def process_output_requirement(message: types.Message, state: FSMContext):
	await CreateOrder.next()

	try:
		async with state.proxy() as data:
			comment = data['comment']
			data['requirement'] = message.text

			await bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é, –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
													" - –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤;\n"
													" - –†–∞–±–æ—Ç–∞ —Å –∫–∞—Å—Å–æ–π;\n"
													" - –ü—Ä–∏—ë–º —Ç–æ–≤–∞—Ä;",
														reply_markup = buttons.skipBtn())


	except:
		async with state.proxy() as data:
			data['requirement'] = message.text

			await bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é, –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
													" - –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤;\n"
													" - –†–∞–±–æ—Ç–∞ —Å –∫–∞—Å—Å–æ–π;\n"
													" - –ü—Ä–∏—ë–º —Ç–æ–≤–∞—Ä;")


@checkStatus
async def process_output_respons(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		data['respons'] = message.text
		await CreateOrder.next()

		await bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∞–∫–∞–Ω—Å–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –í–∞—à–µ–π —Ä–∞–±–æ—Ç—ã –∏ —Ç.–¥\n",
			reply_markup = buttons.skip_btn)


@checkStatus
async def process_output_comment_and_all_data(message: types.Message, state: FSMContext):
	today = datetime.datetime.today().strftime('%d.%m.%Y')

	async with state.proxy() as data:
		data['comment'] = f"<b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b>\n<code>{message.text}</code>"

		cus_id = message.from_user.id
		order_id = len(connection.selectOrders(cus_id))
		cus_name = connection.getCustomerName(cus_id)
		cus_adress = data['adress_info']
		cus_work_graphic = data['graphic']
		cus_bid = data['bid']
		requirement = data['requirement']
		respons = data['respons']
		cus_position = data['position']
		cus_comment = data['comment']
		cus_lat = data['location_lat']
		cus_long = data['location_long']

		if data['order_type'] == 'stock':
			await bot.send_message(message.chat.id, f"<b>–ó–∞–∫–∞–∑—á–∏–∫:</b> <code>{cus_name[0]}</code>\n"
													f"<b>–ê–¥—Ä–µc: </b><code>{cus_adress}</code>\n\n"

													f"<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> <code>{cus_position}</code>\n"
													f"<b>–û–∂–∏–¥–∞–Ω–∏–µ:</b> <code>{data['payment_for_waiting']}‚ÇΩ/1 –¥–µ–Ω—å</code>\n"
													f"<b>–ì—Ä–∞—Ñ–∏–∫:</b> <code>{cus_work_graphic}</code>\n"
													f"<b>–°–º–µ–Ω–∞:</b> <code>{cus_bid}</code>\n\n"

													f"<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ:</b>\n<code>{requirement}</code>\n\n"
													f"<b>–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:</b>\n<code>{respons}</code>\n\n"

													f"{data['comment']}")
			await bot.send_message(message.chat.id, "–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ, —Ö–æ—Ç–∏—Ç–µ –ª–∏ –í—ã –µ–≥–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å?",
													reply_markup = buttons.change_order)

		
		elif data['order_type'] == 'on_time':
			cus_work_day = data['days']
			await bot.send_message(message.chat.id, f"<b>–ó–∞–∫–∞–∑—á–∏–∫:</b> <code>{cus_name[0]}</code>\n"
													f"<b>–ê–¥—Ä–µc: </b><code>{cus_adress}</code>\n\n"

													f"<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> <code>{cus_position}</code>\n"
													f"<b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> <code>{cus_work_day}</code>\n"
													f"<b>–ì—Ä–∞—Ñ–∏–∫:</b> <code>{cus_work_graphic}</code>\n"
													f"<b>–°–º–µ–Ω–∞:</b> <code>{cus_bid}</code>\n\n"

													f"<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ:</b>\n<code>{requirement}</code>\n\n"
													f"<b>–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:</b>\n<code>{respons}</code>\n\n"

													f"{data['comment']}")
			await bot.send_message(message.chat.id, "–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ, —Ö–æ—Ç–∏—Ç–µ –ª–∏ –í—ã –µ–≥–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å?",
													reply_markup = buttons.change_order)		


@checkStatus
async def process_output_without_comment(c: types.CallbackQuery, state: FSMContext):
	await bot.delete_message(c.from_user.id, c.message.message_id)
	today = datetime.datetime.today().strftime('%d.%m.%Y')

	async with state.proxy() as data:
		cus_id = c.from_user.id
		data['comment'] = ''
		order_id = len(connection.selectOrders(cus_id))
		cus_name = connection.getCustomerName(cus_id)
		cus_adress = data['adress_info']
		cus_work_graphic = data['graphic']
		
		cus_bid = data['bid']
		requirement = data['requirement']
		respons = data['respons']
		cus_position = data['position']
		cus_comment = data['comment']
		cus_lat = data['location_lat']
		cus_long = data['location_long']

		if data['order_type'] == 'stock':
			await bot.send_message(c.from_user.id, f"<b>–ó–∞–∫–∞–∑—á–∏–∫:</b> <code>{cus_name[0]}</code>\n"
													f"<b>–ê–¥—Ä–µc: </b><code>{cus_adress}</code>\n\n"

													f"<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> <code>{cus_position}</code>\n"
													f"<b>–û–∂–∏–¥–∞–Ω–∏–µ:</b> <code>{data['payment_for_waiting']}‚ÇΩ/1 –¥–µ–Ω—å</code>\n"
													f"<b>–ì—Ä–∞—Ñ–∏–∫:</b> <code>{cus_work_graphic}</code>\n"
													f"<b>–°–º–µ–Ω–∞:</b> <code>{cus_bid}</code>\n\n"

													f"<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ:</b>\n<code>{requirement}</code>\n\n"
													f"<b>–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:</b>\n<code>{respons}</code>")
			await bot.send_message(c.from_user.id, "–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ, —Ö–æ—Ç–∏—Ç–µ –ª–∏ –í—ã –µ–≥–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å?",
													reply_markup = buttons.change_order)


		elif data['order_type'] == 'on_time':
			cus_work_day = data['days']
			await bot.send_message(c.from_user.id, f"<b>–ó–∞–∫–∞–∑—á–∏–∫:</b> <code>{cus_name[0]}</code>\n"
													f"<b>–ê–¥—Ä–µc: </b><code>{cus_adress}</code>\n\n"

													f"<b>–î–æ–ª–∂–Ω–æ—Å—Ç—å:</b> <code>{cus_position}</code>\n"
													f"<b>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:</b> <code>{cus_work_day}</code>\n"
													f"<b>–ì—Ä–∞—Ñ–∏–∫:</b> <code>{cus_work_graphic}</code>\n"
													f"<b>–°–º–µ–Ω–∞:</b> <code>{cus_bid}</code>\n\n"

													f"<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ:</b>\n<code>{requirement}</code>\n\n"
													f"<b>–û–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:</b>\n<code>{respons}</code>")
			await bot.send_message(c.from_user.id, "–í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ, —Ö–æ—Ç–∏—Ç–µ –ª–∏ –í—ã –µ–≥–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å?",
													reply_markup = buttons.change_order)			


async def cSkip_output_location(c: types.CallbackQuery, state: FSMContext):
	await CreateOrder.next()

	await c.message.delete()
	await bot.delete_message(c.from_user.id, c.message.message_id-1)

	await bot.send_message(c.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ—Å—Ç–∏.",
		reply_markup = buttons.skipBtn())


async def cSkip_output_payment_for_waiting(c: types.CallbackQuery, state: FSMContext):
	await CreateOrder.next()

	await c.message.delete()
	await bot.send_message(c.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–∫–æ–ª—å–∫–æ –≤—ã –±—É–¥–µ—Ç–µ –ø–ª–∞—Ç–∏—Ç—å –∑–∞ 1 –¥–µ–Ω—å –æ–∂–∏–¥–∞–Ω–∏–µ.",
		reply_markup = buttons.skipBtn())



async def cSkip_output_position(c: types.CallbackQuery, state: FSMContext):
	await CreateOrder.next()

	await bot.delete_message(c.from_user.id, c.message.message_id)
	await bot.send_message(c.from_user.id, "–ù–∞ –∫–∞–∫–æ–µ –∫–æ–ª-–≤ –¥–Ω–µ–π –í–∞–º –Ω—É–∂–µ–Ω —Å–æ—Ç—Ä—É–¥–Ω–∏–∫?",
		reply_markup = buttons.skipBtn())




async def cSkip_output_days(c: types.CallbackQuery, state: FSMContext):
	await CreateOrder.next()

	await bot.delete_message(c.from_user.id, c.message.message_id)
	await bot.send_message(c.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã.",
		reply_markup = buttons.skipBtn())

	



async def cSkip_output_graphic(c: types.CallbackQuery, state: FSMContext):
	await CreateOrder.next()
	
	await bot.delete_message(c.from_user.id, c.message.message_id)
	await bot.send_message(c.from_user.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫–æ–ª—å–∫–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏—Ç –∑–∞ —Å–º–µ–Ω—É.",
		reply_markup = buttons.skipBtn())



async def cSkip_output_bid(c: types.CallbackQuery, state: FSMContext):
	await CreateOrder.next()

	await bot.delete_message(c.from_user.id, c.message.message_id)
	await bot.send_message(c.from_user.id, "–£–∫–∞–∂–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é, –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
											" - –ö–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å;\n"
											" - –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Å—Å–æ–π;\n"
											" - –û–ø—ã—Ç –æ—Ç 1 –≥–æ–¥–∞;",
												reply_markup = buttons.skipBtn())	



async def cSkip_output_requirement(c: types.CallbackQuery, state: FSMContext):
	await CreateOrder.next()	

	await bot.delete_message(c.from_user.id, c.message.message_id)
	await bot.send_message(c.from_user.id, "–£–∫–∞–∂–∏—Ç–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏ –∫ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—é, –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
											" - –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–æ–≤;\n"
											" - –†–∞–±–æ—Ç–∞ —Å –∫–∞—Å—Å–æ–π;\n"
											" - –ü—Ä–∏—ë–º —Ç–æ–≤–∞—Ä;",
												reply_markup = buttons.skipBtn())



async def cSkip_output_respons(c: types.CallbackQuery, state: FSMContext):
	await CreateOrder.next()	
	
	await bot.delete_message(c.from_user.id, c.message.message_id)
	await bot.send_message(c.from_user.id, "–£–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –≤–∞–∫–∞–Ω—Å–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –í–∞—à–µ–π —Ä–∞–±–æ—Ç—ã –∏ —Ç.–¥\n",
		reply_markup = buttons.skip_btn)



@checkStatus
async def process_get_publish(c: types.CallbackQuery, state: FSMContext):
	await c.answer()
	try:
		async with state.proxy() as data:
			if data['order_type'] == 'stock':
				allowance = int(data['payment_for_waiting'])

				frst = int(admin_connection.selectIcs('ic_stock', 1)[0])

				total_1 = allowance*30+frst*30
				total_2 = allowance*90+frst*90
				total_3 = allowance*180+frst*180

				await bot.send_photo(
					chat_id = c.message.chat.id, 
					photo = file_ids.PHOTO['price'],
					caption = f"<b>1.</b> <code>30</code> –¥–Ω—è –≤ –ª–µ–Ω—Ç–µ - <code>{total_1}</code> <code>‚ÇΩ</code>\n"
							  f"<b>2.</b> <code>90</code> –¥–Ω–µ–π –≤ –ª–µ–Ω—Ç–µ - <code>{total_2}</code> <code>‚ÇΩ</code>\n"
							  f"<b>3.</b> <code>180</code> –¥–Ω–µ–π –≤ –ª–µ–Ω—Ç–µ - <code>{total_3}</code> <code>‚ÇΩ</code>\n",
								reply_markup = buttons.menuPrice(total_1, total_2, total_3))
			
			elif data['order_type'] == 'on_time':
				frst = int(admin_connection.selectIcs('ic_one_time', 1)[0])
				scnd = int(admin_connection.selectIcs('ic_one_time', 2)[0])
				thrd = int(admin_connection.selectIcs('ic_one_time', 3)[0])

				total_1 = frst*3
				total_2 = scnd*7
				total_3 = thrd*30

				await bot.send_photo(
					chat_id = c.message.chat.id, 
					photo = file_ids.PHOTO['price'],
					caption = f"<b>1.</b> <code>3</code> –¥–Ω—è –≤ –ª–µ–Ω—Ç–µ - <code>{total_1}</code> <code>‚ÇΩ</code>\n"
							  f"<b>2.</b> <code>7</code> –¥–Ω–µ–π –≤ –ª–µ–Ω—Ç–µ - <code>{total_2}</code> <code>‚ÇΩ</code>\n"
							  f"<b>3.</b> <code>30</code> –¥–Ω–µ–π –≤ –ª–µ–Ω—Ç–µ - <code>{total_3}</code> <code>‚ÇΩ</code>\n",
								reply_markup = buttons.menuPrice(total_1, total_2, total_3, is_stock = False))

	except KeyError:
		await c.message.delete()
		await bot.delete_message(c.from_user.id, c.message.message_id-1)


@checkStatus
async def process_pay(c: types.CallbackQuery, state: FSMContext):
	await c.answer()
	try:
		async with state.proxy() as data:
			if data['order_type'] == 'stock':
				ids = c.data[6:].split(',')
				days = ids[0]
				total = ids[1]
				async with state.proxy() as data:
					data['actual_days'] = days
				
					await bot.send_message(c.from_user.id, f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ</b>\n\n<b>–í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ:</b> <code>{days} –¥–Ω–µ–π –≤ –ª–µ–Ω—Ç–µ</code>\n <b>–ö –æ–ø–ª–∞—Ç–µ:</b> <code>{total} ‚ÇΩ</code>", 
						reply_markup = buttons.to_pay(total))
			
			elif data['order_type'] == 'on_time':
				ids = c.data[6:].split(',')
				days = ids[0]
				total = ids[1]
				async with state.proxy() as data:
					data['actual_days'] = days
				
					await bot.send_message(c.from_user.id, f"<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ</b>\n\n<b>–í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ:</b> <code>{days} –¥–Ω–µ–π –≤ –ª–µ–Ω—Ç–µ</code>\n <b>–ö –æ–ø–ª–∞—Ç–µ:</b> <code>{total} ‚ÇΩ</code>", 
						reply_markup = buttons.to_pay(total))			

	except Exception as e:
		print(e)
		await c.message.delete()


async def check_payment(c: types.CallbackQuery, state: FSMContext):
	try:
		user_id = c.from_user.id
		price = int(c.data[10:])
		today = datetime.datetime.today()
		# dmy = datetime.datetime.today().strftime('%d.%m.%Y')
		user_balance = int(connection.get_id(user_id)[6])
			

		if user_balance >= price:
			async with state.proxy() as data:
				order_id = len(connection.selectOrders(user_id))
				cus_name = connection.getCustomerName(user_id)
				cus_adress = data['adress_info']
				cus_work_graphic = data['graphic']
				cus_bid = data['bid']
				requirement = data['requirement']
				respons = data['respons']
				cus_position = data['position']
				cus_comment = data['comment']
				cus_lat = data['location_lat']
				cus_long = data['location_long']
				order_status = '–ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏'
				actual_days = data['actual_days']
				order_type = data['order_type']
				from_id = connection.getMyFromId(user_id)

				await bot.delete_message(c.message.chat.id, c.message.message_id)

				# if data['order_type'] == 'stock':
				# 	frst = int(admin_connection.selectIcs('ic_stock', 1)[0])
					
				# 	if actual_days == '30':
				# 		comission = frst * 30

				# 	elif actual_days == '90':
				# 		comission = frst * 90
					
				# 	elif actual_days == '180':
				# 		comission = frst * 180

				# elif data['order_type'] == 'on_time':
				# 	cus_work_day = data['days']

				# 	frst = int(admin_connection.selectIcs('ic_one_time', 1)[0])
				# 	scnd = int(admin_connection.selectIcs('ic_one_time', 2)[0])
				# 	thrd = int(admin_connection.selectIcs('ic_one_time', 3)[0])

				# 	if actual_days == '3':
				# 		comission = frst * 3

				# 	elif actual_days == '7':
				# 		comission = scnd * 7
						
				# 	elif actual_days == '30':
				# 		comission = thrd * 30
						

			connection.updateBalance(user_id, price, '-')
			if data['order_type'] == 'stock':
				connection.createNewOrder(user_id, cus_name[0], cus_adress, cus_work_graphic, None, cus_bid, cus_position, cus_comment, 
					cus_lat, cus_long, today, order_status, order_id, price, requirement, respons, actual_days, order_type, data['payment_for_waiting'])

			else:
				connection.createNewOrder(user_id, cus_name[0], cus_adress, cus_work_graphic, cus_work_day, cus_bid, cus_position, cus_comment, 
					cus_lat, cus_long, today, order_status, order_id, price, requirement, respons, actual_days, order_type, None)				

			await bot.send_message(c.from_user.id,  "üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:</b>\n\n"
													"–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é, –æ—Ç—Å–ª–µ–¥–∏—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ –≤ \"–ú–æ–∏ –∑–∞–∫–∞–∑—ã\"", 
														reply_markup = buttons.autoMenu(connection.checkUserStatus(c.from_user.id)[0]))
			await state.finish()
		else:
			await bot.answer_callback_query(c.id, show_alert = True, text = "‚ö†Ô∏è –û—à–∏–±–∫–∞:\n\n"
																		    "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")

	except Exception as e:
		print(e)
		await bot.send_message(c.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –∏–ª–∏ —É—Ç–µ–∫–ª–∏ —Å—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!")



def register_reg_order_handlers(dp: Dispatcher):
	dp.register_callback_query_handler(process_get_create_order, lambda c: c.data == 'get_create',  state = '*')
	dp.register_callback_query_handler(process_ask_type_publication, lambda c: c.data == 'ok_understand', state = '*')    
	dp.register_callback_query_handler(process_get_location, lambda c: c.data == 'stock' or c.data == 'on_time' or c.data == 'change',  state = '*')    
	dp.register_callback_query_handler(process_get_publish, lambda c: c.data == 'publish',  state = '*')

	dp.register_message_handler(process_output_location, content_types = ['location','venue'], state = CreateOrder.step1)
	dp.register_message_handler(process_output_payment_for_waiting,  state = CreateOrder.new_step)
	dp.register_message_handler(process_output_position, state = CreateOrder.step2)
	dp.register_message_handler(process_output_days, state = CreateOrder.step3)
	dp.register_message_handler(process_output_graphic, state = CreateOrder.step4)
	dp.register_message_handler(process_output_bid, state = CreateOrder.step5)
	dp.register_message_handler(process_output_requirement, state = CreateOrder.step6)
	dp.register_message_handler(process_output_respons, state = CreateOrder.step7)
	dp.register_message_handler(process_output_comment_and_all_data, state = CreateOrder.step8)
	dp.register_callback_query_handler(process_output_without_comment, lambda c: c.data == 'skip', state = CreateOrder.step8)

	dp.register_callback_query_handler(process_pay, lambda c: c.data.startswith('price'),  state = '*')
	dp.register_callback_query_handler(check_payment, lambda c: c.data.startswith('pay_order'),  state = '*')

	dp.register_callback_query_handler(cSkip_output_location, lambda c: c.data == 'cSkip', state = CreateOrder.step1)
	dp.register_callback_query_handler(cSkip_output_payment_for_waiting, lambda c: c.data == 'cSkip',  state = CreateOrder.new_step)
	dp.register_callback_query_handler(cSkip_output_position, lambda c: c.data == 'cSkip', state = CreateOrder.step2)
	dp.register_callback_query_handler(cSkip_output_days, lambda c: c.data == 'cSkip', state = CreateOrder.step3)
	dp.register_callback_query_handler(cSkip_output_graphic, lambda c: c.data == 'cSkip', state = CreateOrder.step4)
	dp.register_callback_query_handler(cSkip_output_bid, lambda c: c.data == 'cSkip', state = CreateOrder.step5)
	dp.register_callback_query_handler(cSkip_output_requirement, lambda c: c.data == 'cSkip', state = CreateOrder.step6)
	dp.register_callback_query_handler(cSkip_output_respons, lambda c: c.data == 'cSkip', state = CreateOrder.step7)
